(mexp when true false)
(defmacro! when (cond &args) `(if ,cond (do ~args)))
(mexp when true false)
(defmacro! when (cond &args) `(if ,cond (do ~args)))
(mexp when true false)
(defmacro! when (cond &args) `(if ,cond (do ~args)))
(mexp when true false)
(when true (println "bitch"))
(defmacro! when (cond &args) `(if ,cond (do ~args)))
(when true (println "bitch"))
(when true (println "bitch") "my")
(defmacro! defun! (ident args body) `(def! ident (fn* ,args ,body)) )
(defun! incr (x) (+ 1 x))
(incr 1)
(incr 2)
(def! atom !!0)
(atom)
atom
@atom
(swap! atom incr)
@atom
(swap! atom incr)
(swap! atom \incr)
(swap! incr \atom)
e
(swap! incr \atom)
(mexp defun h () 1)
(eval(mexp defun h () 1))
(defun he)
(defun hello 19 38)
(eval(mexp defun! h () 1))
(mexp defun! h () 1)
(defun! beleidige (arg) (println (str "du bist ein kleiner " arg)))
(beleidige "hurensohn")
(beleidige "nigger")
(when true (println 20) (println 3))
(when true (println 20) (println 3) (str 10 39))
(when true (println 20) (println 3) (str 10 'du 'hs 39))
(str '(do ') ))
(def? helo)
(def! helo nil)
nil
true
nil
(def? helo)
(def! helo nil)
(def? helo)
(def! helo 9)
(def? helo)
asd
