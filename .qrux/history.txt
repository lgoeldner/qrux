(def! fac (  fn*  (n) (if (= 0 n)  1  (fac (- 1 n)) )))
(fac 2)
(def! fac (  fn*  (n) (if (= 0 n)  1  (fac (- 1 n)) )))
(fac 2)
(def! fac (  fn*  (n) (if (= 0 n)  1  (fac (- 1 n)) )))
(fac 2)
(def! fac (  fn*  (n) (if (= 0 n)  1  (fac (- 1 n)) )))
(fac 2)
(def! fac (  fn*  (n) (if (= 0 n)  1  (fac (- 1 n)) )))
(fac 2)
(def! fac (  fn*  (n) (if (= 0 n)  1  (fac (- 1 n)) )))
(fac 2)
(def! fac (  fn*  (n) (if (= 0 n)  1  (fac (- 1 n)) )))
(fac 2)
(def! fac (  fn*  (n) (if (= 0 n)  1  (fac (- 1 n)) )))
(fac 1)
(def! fac (  fn*  (n) (if (= 0 n)  1  (fac (- 1 n)) )))
(fac 1)
(def! fac (  fn*  (n) (if (= 0 n)  1  (fac (- 1 n)) )))
(fac 1)
(def! fac (  fn*  (n) (if (= 0 n)  1  (fac (- 1 n)) )))
(fac 1)
(def! fac (  fn*  (n acc) (if (= 0 n)  acc  (fac (- 1 n) (* n acc)) )))
(fac 2)
(def! fac (  fn*  (n acc) (if (= 0 n)  acc  (fac (- 1 n) (* n acc)) )))
(fac 1)
(def! fac (  fn*  (n acc) (if (= 0 n)  acc  (fac (- 1 n) (* n acc)) )))
(fac 1)
(def! fac (  fn*  (n acc) (if (= 0 n)  acc  (fac (- 1 n) (* n acc)) )))
(fac 1)
(def! fac (  fn*  (n acc) (if (= 0 n)  acc  (fac (- 1 n) (* n acc)) )))
(fac 1)
(def! fac (  fn*  (n acc) (if (= 0 n)  acc  (fac (- 1 n) (* n acc)) )))
(fac 1)
(let* (c 2) (* 2 c) )
c
(let*  (d 3)  (def! f (fn* (a) (* a d)))  )
(f 2)
(f 3)
(def! not (fn* (bool) (if bool false true) ) )
(not true)
(not false)
"\"
"\n"
(eval "(println "hello")")
(eval "(println \"hello\")")
(eval "(* 2 3)")
(read-string "(println 20)")
(read-string "")
(eval (read-string "(println 20)"))
