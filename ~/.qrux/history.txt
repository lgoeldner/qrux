(/6 2)
(/ 6 2)
(/ 6 "hello")
true
false
nil true false
tru true
true "true"
(true "true")
true "true"
(true 10 30)
(true 1)
(true)
(let* (c 6 a 3) (+ a c))
ca
if true (def! my 200) (def! you 200)
if true (def! 200)
if
def!
(if true (def! y 20))
y
(if true (def! y 20) (def! x 30))
x
y
(if false (def! y 20) (def! x 30))
x
y
(fn* (a) a)
(fn* (a) a) 10
((fn* (a) a) 10)
((fn* (a b) (+ a b)) (10 30))
((fn* (a b) (+ a b)) 10 30)
( (fn* (a b) (+ a b)) 2 3)
(fn* (a) a)
( (fn* (a b) (+ a b)) 2 3)
(def! add (fn* (a b) (+ a b)))
(add 1 3)
(def! (fn* (a b c) (* a (+ b c))))
(def! amult (fn* (a b c) (* a (+ b c))))
(amult 1 2 3)
( (fn* (a b) (+ a b)) 2 3)
((fn* (nil) (nil)) nil)
((fn* (ni) (nil)) nil)
((fn* (ni) (nil)) ni)
(def! fa (fn* () nil))
fa
(fa)
(def! fa (fn* () hel))
fa
(fa)
