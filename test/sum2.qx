;; https://leetcode.com/problems/two-sum/description/

(defun! enum (lst (acc ()) (from 0))
	(if (empty? lst)
		(rev acc)
		(enum (cdr lst) (cons (list from (car lst)) acc) (+ 1 from))))

(defun! sum2 (nums target)
	(let ((en (enum nums))) 
		(map (fn* (a) (- target (cadr a))) en)))

(defun! skip (lst n)
	(if (= 0 n)
		lst
		(skip (cdr lst) (- n 1))))

(defun! fold (init fn over)
	(if (empty? over)
		init
		(fold 
			(fn init (car over))
			fn
			(cdr over))))

(defun! reduce (fn over)
	(fold (car over) fn (cdr over)))

(defun! zip (a b (acc ()))
	(if (or (empty? a) (empty? b))
		(rev acc)
		(zip 
			(cdr a) (cdr b)
			(cons (list (car a) (car b)) acc))))

(defmacro! insertarg (this into)
  (let
    ((fun (car into)))
    (cons fun (cons this (cdr into)))))

(defmacro! -> (v1 &rest)
	(insertarg v1 (dbg (car rest))))

(export! '(fold reduce zip enum sum2 skip -> insertarg))