(defun! enum (lst (acc ()) (from 0))
	(if (empty? lst)
		(rev acc)
		(enum (cdr lst) (cons (list from (car lst)) acc) (+ 1 from))))

(defun! skip (lst n)
	(if (= 0 n)
		lst
		(skip (cdr lst) (- n 1))))

(defun! fold (init fn over)
	(if (empty? over)
		init
		(fold 
			(fn init (car over))
			fn
			(cdr over))))

(defun! reduce (fn over)
	(fold (car over) fn (cdr over)))

(defun! zip (a b (acc ()))
	(if (or (empty? a) (empty? b))
		(rev acc)
		(zip 
			(cdr a) (cdr b)
			(cons (list (car a) (car b)) acc))))

(defun! cons* (&items onto)
  (if (empty? items)
    onto
    (cons* (cdr items) (cons (car items) onto))))

(defun! flatmap (f over (acc ()))
  (if (empty? over)
    (rev acc)
    (let* (el (car over)  next (if (list? el) (flatmap f (car over)) (f el)))
      (flatmap f :over (cdr over) :acc (cons next acc)))))


(export!
  '(fold
    reduce
    zip
    enum
    skip
    cons*
    flatmap
    ))