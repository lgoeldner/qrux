(do

(defmacro! defun! (ident args body)
	`(val! ,ident (fn* ,args ,body)))

(defmacro! when (cond &body)
	`(if ,cond (do ~body)))

(defun! not (bool)
	(if bool
		false
		true))

(val! ! not)

(defun! rep (str)
	(eval
		(read-string str)))

; load a file and execute it with a do block wrapped around
(defun! loadf (path)
	(rep
		(str "(do" (slurp path) "(println \"done!\"))" )))

; returns a curried function
; swaps the order of two arguments
(defun! swap (func) (fn* (a b) (func b a)))

(defun! append (el to)
	(concat to (list el)))

(defun! nil? (it)
	(nil \= it))

(val! lt <)
(val! gt >)
(val! eq =)

(defmacro! := (atom to)
	`(do (reset! ,atom ,to) nil))

)
