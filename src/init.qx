(do

(defmacro! export-all! ()
	`(export! (reflect:defsym)))

(defmacro! defun! (ident args body)
	`(val! ,ident (fn* ,args ,body)))

(defmacro! when (c &rest)
	`(if ,c (do ~rest)))

(defmacro! let (b e)
	`((fn*
        ,(map car b) ,e) 
        ~(map cadr b)))

(defun! t= (a b)
    (= (typeof a) (typeof b)))

(defmacro! and (lhs rhs)
	`(if ,lhs
		(if ,rhs
			true
			false)
		false))

(defmacro! or (lhs rhs)
	`(if ,lhs
		true
		(if ,rhs
			true
			false)))

(defun! rep (str)
	(eval
		(read-string (del! str))))

; load a file and execute it with a do block wrapped around
(defun! loadf (path)
		(rep
			(str 
				"(do\n" 
				(slurp (str path))
				"\n)")))

(defmacro! fn (form)
  `(fn* () ,form))

; swaps the order of two arguments
(defun! flip (func) 
	(fn* (a b) (func b a)))

(defun! append (el to)
	(concat to (list el)))

(defun! nil? (it)
	(= nil it))

(val! lt <)
(val! gt >)
(val! eq =)

(defmacro! assert (c (error ""))
	`(if c
		nil ; nil if the assertion holds
		(throw 
			(str "Assertion Failed: " ',cond ", error: " error))))

(defun! unwrap (it)
	(if (= nil it)
		(throw "Non-nil Assertion failed!")
		it))

(defun! todo ((message nil))
  (throw (if message 
         (str "Not yet implemented: " message) 
         "Not yet implemented!")))

(defmacro! unless (is &rest)
  `(if ,is nil (do ~rest)))

(defmacro! cond (&rest)
	(let*  
	   (first (car rest)
			condition (car first)
			expr (nth 1 first)
			next (cdr rest))
			`(if ,condition
				,expr
				,(if next
					(cons 'cond next)
					nil))))

;; cond except checks for equality
;; cond could be `(case true ~rest)
;; :else for default case
(defmacro! case (this &rest)
	(unless (empty? rest)
    (let*
	   (first (car rest)
			condition (car first)
			expr (nth 1 first)
			next (cdr rest))
			`(if (or (= ,this ,condition) (= ,condition :else))
				,expr
				,(if next
					`(case ,this ~next)
					nil)))))

(defun! dbg (it)
	(do
		(prn it)
		it))

(defun! range (to (from 0) (acc ()))
	(if (< from to)
		(range to :from (+ from 1) :acc (cons from acc))
		(rev acc)))

;; create a collection of the same type
(defun! create-coll (same-as)
  (case (typeof same-as)
    (:Vec [])
    (:List ())
    (:Map {})))

(defmacro! newenv (&rest)
	`((fn* () (do ~rest))))

(defun! cadr (it)
	(car (cdr it)))

(defun! timeit (it)
	(let* (
		now (time)
		res (it)
		elapsed (- (time) now)
		_ (println (str "Result: " it " took " elapsed "ms")))

		res))

(defmacro! timed (it)
	`(timeit (fn* () ,it)))

(defun! map (f over)
	(loop (r over acc (create-coll over))
		(if (empty? r)
			(if (list? acc) (rev acc) acc)
			(recur 
				(cdr r)
				(into acc (f (car r)))))))

(defun! loadf-exported (path)
	(eval (read-string (str "(do " (slurp path) "(*ENV*)" " (export! (reflect:defsym)))"))))

(defmacro! list:iter (ident in &rest)
	   `(map (fn* (,ident) (do ~rest)) ,in))

(defmacro! set! (ident val)
	`(do (del! ,ident) (val! ,ident ,val)))

(defun! str:substr (s (from 0) (to (str:len s)))
	(str:_substr s from to))

(defun! enum (lst (acc ()) (from 0))
	(if (empty? lst)
		(rev acc)
		(enum (cdr lst) (cons (list from (car lst)) acc) (+ 1 from))))

(defun! fold (init f over)
  (loop (acc init over over)
    (if (empty? over)
      acc
      (recur 
        (f acc (car over))
        (cdr over)))))

(defun! reduce (f over)
	(fold (car over) f (cdr over)))

(defun! zip (a b (acc ()))
	(if (or (empty? a) (empty? b))
		(rev acc)
		(zip 
			(cdr a) (cdr b)
			(cons (list (car a) (car b)) acc))))

(defun! flatmap (f over (acc ()))
  (if (empty? over)
    (rev acc)
    (let* 
		  (el (car over)  
			 next (if (list? el) (flatmap f (car over)) (f el)))

      (flatmap f :over (cdr over) :acc (cons next acc)))))


(defun! chunk (it size)
  (loop (rest it acc (create-coll it))

    (if (len> rest (- size 1))
      (recur
        (skip rest size)
        (into acc (take rest size)))
      acc)))


;; insert `this` into a list as first argument (2nd position)
;; into: function or incomplete expr
;; like: +, (+ 10), (cons '(1 2 3 4))
(defmacro! insertarg (this into)
  (if (list? into)
    (cons (car into) (cons this (cdr into)))
    (list into this)))

(defmacro! thread-list (v1 into)
  (if (empty? into)
    v1
    `(thread-list (insertarg ,v1 ,(car into)) ,(cdr into))))

(defmacro! -> (start &rest)
  `(thread-list ,start ,rest))

(list:iter file :in *ARGS*
		(println (str "loading file: " (car *ARGS*)))
		(try* (loadf (car *ARGS*))
			(catch* ex (println (str "failed to load `" file "`: " ex)))))

)