(defun! range (from to)
	(if (< from to)
		(cons from (range (from \+ 1) to))
		'()))

(val! -> range)
(val! <- (swap ->))

(defun! append (el to)
	(concat to (list el)))

(defun! dbg (it)
	(do
		(prn it)
		it))

(defun! dbgl (label it)
	(do
		(prn (str label ": " it))
		it))

;;; partially applies some arguments to a function
(defun! part (fun &args)
	(fn* (&rest) (eval `(,fun ~args ~rest))))

(defmacro! apply (&args)
	(let* (last ((count args) \- 1))
		(do
			`(,(car args) ; first function
				~(slice 1 last args) ; rest of the arguments
				~(nth last args))))) ; arguments provided in a list
